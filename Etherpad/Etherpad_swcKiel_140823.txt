
Welcome to MoPad!

This pad text is synchronized as you type, so that everyone viewing this page sees the same text.  This allows you to collaborate seamlessly on documents!

Please be cognizant of whether you are using a public pad or private/team pad, and take appropriate precautions with data you post here!

 
 
 Bernhard:
 Hello everybody :)
 This is our shared notebook!


https://dl.dropboxusercontent.com/u/2795534/history.txt


http://bernhardkonrad.github.io/2014-08-21-Kiel-Instructors/Shell/lesson.md


 
 BASH:
 whoami
 pwd --> print working directory
ls  # list out the files and directories under current directory
ls -F 
ls FOLDERNAME   #list files and directories in specified folder
ls -F -a # all files, also hidden files
ls . # content current folder
ls .. # content parent folder
cd FOLDERNAME # change directory
ls /FOLDERNAME # absolute path
cd # goes to home directory
cd ~# goes to home directory
ls --help  #doesn't work on a Mac
man ls # manual #doesn't work on Windows
ls -s #shows the size of the files
ls -s -h #makes it readable for humans#the -h just changes the file size into KB and adds the units
ls -l -h #use this for Macs
ls -h # prints the same as "ls"


"arrow up/down" #move upwards/downwards in the command history
use tabstop to autocomplete filenames and commands


http://www.math.ubc.ca/~konradbe/swc-kiel/Data.zip

mkdir # make directory
rmdir # remove directory

cat FILENAME # content of file
head FILENAME # first 10 lines of file
head -n 100 FILENAME # first 100 lines of file
tail FILENAME # bottom of file
tail -n 42 FILENAME # last 42 lines of file
wc FILENAME # word count (lines, words, bytes)
wc -l FILENAME # line count
ls > FILENAME # save ls output to file
ls | wc # word count for directory #the pipe "|" is to take the output of the command before as the input of the command after
# Be carefull with ">", you could use ">>" instead; or always use Tab to get an idea if the file exist already


challenge:

Create a file middle.txt that contains lines 100-110 of met_090_1_001.ctd
head -n 110 met_090_1_001.ctd #1.- Show first 110 lines of file

head -n 110 met_090_1_001.ctd | tail -n 11 > middle.txt #2. takes the first 110 lines and erases the first 99 then writes the result as a file "middle.txt"


Back at 13:15. Enjoy your lunch :)



Git session

if Mac or Linux:
git config —global core.editor “nano”
if Windows
git config —global core.editor “notepad.exe”
git init #initialized empty Git repository in …swcKiel folder 
#look at "git cheat sheet" for the rest
ls -a # to show hidden folders
touch Readme.txt
vi Readme.txt
nano Readme.txt  #for mac
notepad Readme.txt  #for windows
git status #check the situation in your repository
git add Readme.txt #add Readme.txt to the files that are monitored by git
git commit -m “My very first git ever”
git diff filename  #shows the file differences not yet staged
git log #see all comments added together with commit
to copy from the screen in Windows: right click at bar at the top, choose Edit and then Mark. when you mark it automatically copies, then choose Insert. If it does not automatically copy, choose Edit and the copy, then choose Insert
git checkout ID_of_commit #go back to before this commit
git checkout master #check all the commits
git checkout — #undo changes that have not been added/committed to git
if there are unsaved changes and you don’t want them you have to do this first? exactly# doesn’t work for me, just shows list of changed files


with Github you can now share your file and collaborate
https://github.com/BernhardKonrad/swcKiel
​

https://raw.githubusercontent.com/BernhardKonrad/swcKiel/master/Scripts/gen-survey-database_swc_pgsql.py



Rainer 140823: 
"""
There are two ways to get an sql shell running. If you have command line tools for sql running, you can start it directly from the terminal. 
Just type: psql "user=your_username dbname=database_you_want_to_connect_to host=localhost" (((You can leave out user and host if the default settings are correct)))

You can start the psql shell from applications, the launchpad, or in your windows program selection. This one will directly connect to pgsql and will ask you for username, database name etc. Below prompt shows the command line for this: in [] brackets are the default settings.
"""

#open the sql shell and then press enter until you see the last line (enter your pw when asked- this is either the one you entered when installing this or the one from your computer)
Server [localhost]: 
Database [postgres]: 
Port [5432]: 
Username [postgres]: 
Password for user postgres: 
psql (9.3.5)
Type "help" for help.

postgres=# 




SQL

a1) getting a database running

!!!This only works as the postgres user which has superuser permissions. The postgres user can CREATE ROLE s (different word for users) and CREATE DATABASE s!!!

# to create a new user type:

CREATE ROLE username PASSWORD 'password' LOGIN; (password needs to be in '')

## LOGIN is needed to enable login, this is not default


# to create a database "test" with the owner "username"
# this only works when logged in over the sql shell as postgres / into the postgres 

CREATE DATABASE survey WITH OWNER = username; 


with
postgres=# \l  #to check the databases created
postgres=# \q  #to quit

Then, modify the script gen-survey-database_swc_pgsql.py and replace user and password with the username and password from above

Finally, run the script python script (in swcKiel/Scripts)
python gen-survey-database_swc_pgsql.py

If there are no errors, pat yourself on the back: you are all set

#Solution for Windows: open SQL shell (psql) from programs type password when asked (password of your computer or password you typed in during installation of the program) 
#once you created your own database: survey change the ownername and password in the script. 
#open&edit the script in Notepad++
#

solution for linux to login to psql as postgres user:
sudo su postgres # change current bash session to use postgres username
psql "user=postgres" # should not give psql: FATAL:  Peer authentication failed for user "postgres" anymore but start postgreSQL
Cool, thank you :)

# solution to start psql from git-bash on Windows 7
# The psql.exe isn't found by the shell because it's not in the (search) PATH of Windows
#
# 1. First locate where you installed PostgreSQL and check for the executable (binary) "psql.exe"
# (Should be something like "C:\Program Files\PostgreSQL\9.3\bin"

#(on my machine, this only worked when I entered the path name in english ("program files" NOT "programme") even though I have a german OS and the folder is displayed as "Programme" in the explorer)

# 2. Go to your desktop, right click on the Computer icon and choose Properties
# 3. In the System window click on Advanced system settings in the left pane
# 4. In the System Properties window select Advanced tab and click on Environment Variables… button given at the bottom of the window
# 5. In the Environment Variables window you will notice two columns User variables for a username and System variables.
# 6a. If you alread have a User variable named "PATH", select this one, choose edit, and append the above path to the end of the variable (separated by ";").
# 6b. If you don't have a User variable named "PATH", create one and add the above path to the Variable value.
# 7. Save/Ok all your way out again, restart your git-bash window and the "psql" command should work.

Do the same for Notepad++ if you want to run it from the shell...

#for Mac users: I installed postgreSQL via Macports, not with the GUI installer. Finally got everything up and running until trying the following command: 
python gen-survey-database_swc_pgsql.py
# I get: Traceback (most recent call last):
#File "gen-survey-database_swc_pgsql.py", line 19, in <module>
#    import pandas.io.sql as sql
#ImportError: No module named pandas.io.sql
#other modules (e.g. nose) seem to be missing as well.
If you install python with Anaconda these modules (pandas, nose) will be installed with it.


Day 2

#for Windows: run command in Git-Bash:
python gen-survey-database_swc_pgsql.py in Git Bash 
# in SQL shell (psql) got to "survey" database to see if it works: \d

\d #shows the tables in your database 
\d person #(person for this database) shows some details regarding to the person table

#SQL is NOT case sensitive write comments in caps lock, file names etc in small letters. 
#Writing sql command as SELECT/FROM/WHERE/As is to distinguish them from the   variables only for yourself, so that it is easier for you to read.

An SQL command in the sql shell is finished with a semicolon ;

SELECT * FROM person #shows everything in the table person 
SELECT reading FROM survey;  # shows the contents of the column 'reading' from the table 'survey'
SELECT avg(reading) AS avg_temp FROM survey WHERE quant = 'temp';  # computes the average of all the temperature readings under the name 'avg_temp'; the column 'quant' gives you the type of measurement (in this case, temperature), and the column 'reading' gives you the actual value. WHERE quant = 'temp' restricts the output to the quantity temperature. You need to put temp into single quotation marks, as this is a string.
SELECT DISTINCT(quant) FROM survey; # gives you the names of all different entries (data types) in column 'quant' and the number of different entries as number of rows
SELECT COUNT(DISTINCT(quant)) FROM survey; # gives you just the number of different data types in column 'quant'
SELECT quant, AVG(reading) FROM survey GROUP BY quant; # gives you the average of each of the different measurements(reading) for each quant, i.e. average temperature, average salinity, average radiation
SELECT quant, COUNT(reading) FROM survey GROUP BY quant; # same as above, but counts measurements in each data type group instead of calculating the average.


#we want to combine survey and person tables. #person.ident and survey.person are identical, hence the joining is possible; this produces a combined  table from person and survey to link person to  measurement, i.e. figure  out who did which measurement

SELECT ident, personal, family, quant, reading, person FROM survey JOIN person ON person.ident = survey.person;
#this doesn't include the data without personal/identity information so write this: 
SELECT ident, personal, family, quant, reading, person FROM person RIGHT JOIN SURVEY ON person.ident = survey.person; #gives you all measurements, including those that don't have a person doing the measurements. opposite is LEFT JOIN, gives you only the measurements including a person, and the persons that didn't do measurements


Be aware of NULL or NaN or -999 etc., these are ways to write that there is no data. This is different to 0 and you have to think about how to deal with it in with regards to your data!



Rainer:

"""
main sql commands covered:


SELECT
FROM 
AS
(LEFT/RIGHT) JOIN
GROUP BY
WHERE (works well with =, >, <, BETWEEN a and b)

DISTINCT

Math operations: MIN, MAX, AVG, COUNT
"""



Intro to Python 
---------------------

git clone https://github.com/BernhardKonrad/swcKiel.git

print 'Hello'
x = 5 #stores 5 as variable x
y = 78 * x
type (x) #gives the type of the variable (integer, string)

exit() # exits python and goes to shell. 

create a file named hello.py in text editor saying: print "Hello world!" 
python hello.py #calls the script in shell


If you clone swcKiel:
ipython notebook --profile-dir=ipython-trainingwheels


If you did not clone:
ipython notebook

If neither works:
python intro.py
and text editor


To see what you are missing:
http://nbviewer.ipython.org/github/BernhardKonrad/swcKiel/blob/master/PythonIntro.ipynb

# you can use the notebook instead of shell but it works only if you clone the swcKiel.git which is shared above. 

mystring = "Let's do this"
print dir(mystring) #list all built-in string functions
print mystring.swapcase() #doesn't take an argument, hence () are empty
a = 1
b = 2
c = a+b
d = a/b
print d #gives 0, when we expect 0.5
print type(a), type(b), type(c), type(d) #prints types, i.e. int. BEWARE: computations between integers will always result in integers. Which may be arithmetically wrong. Fix by using floats
a = 1.0
b = 2.0
d = a/b
print d #gives 0.5
print type(a), type(b), type(d)
voltages = [-2.0, -1.0, 0.0, 1.0, 2.0] #makes a list
print type(voltages)
print voltages[0] #prints the first element in the list (!). Indices in python start at 0.
print voltages[3] #prints the 4th element in the list
print voltages[1:3] #gives elements 1 and 2, i.e. the 2nd and 3rd entry of the list. Endpoint (i.e. the 3) is not included
print len(voltages) #5
print voltages[2:] #gives elements 2 to 4 (the end of the list), i.e. the 3rd to 5th entry of the list 
print voltages[:2] #gives elements 0 and 1
print voltages[:] #gives entire list
#Flow control
print 2+2 == 4 # == checks whether sth is true or false; gives TRUE
print 5 < 3.5 or 4==5-1 #TRUE because one of them is correct (OR only requires one of the statements to be correct to return TRUE)
print 5 < 3.5 and 4==5-1 #FALSE because only one of them is correct (AND requires both statements to be correct to return TRUE)
print 5 < 3.5 or not 'lunch' == 'breakfast' #TRUE because one of them is correct

#if statement
x = -5
if x < 0:
    print "x is negative" #if statement doesn't require an 'end' statement, only indentation
    print "this is inside the if statement"
    if x < -10
        print "x is really negative" #nested if statement
print "this is outside the if statement"

#if your text editor is familiar with python then the indentation is always 4 space. if not do 4 space by yourself. if the intendations are not the same within if statement shell will give you error.  special note for Notepad++ 1 tab is 4 space.  but try to avoid tab because tab might be different in different operating systems. use space button instead of tab. 

x = 15 
if x < 0:
    print "x is negative" 
elif x == 0:
    print "x is zero"
elif x > 0:
    print "x is positive"


x = 15
if x < 0:
    print "x is negative" 
if x == 0:
    print "x is zero"
if x > 0:
    print "x is positive" 

# both work and they are not different when you have only 10 line data but as soon as the data gets bigger the second one will consume much more time then elif command. with elif command: when it reaches its aim in the first line then it doesnt try with other elif commands but in if if if command it tries with each if statement - time consuming. 

#for loops 

fruits = ['apples', 'oranges', 'bananas']
prices = [0.49, 0.99, 0.32]
for fruit in fruits:
        print fruit
#for each fruit will be assigned to single word indicated so outcome will be 
apples 
oranges 
bananas


for i in range(min(len(fruits),len(prices))):
          print prices[i], fruits[i]

Lisa solution:
fruits = ['apples', 'oranges', 'bananas']
prices= [0.49, 0.99, 0.32]
for (f,ii) in zip(fruits,range(len(fruits))):
        print str(prices[ii]+' '+f)

# this is actually simpler (lisa here):
for (pr,f) in zip(prices,fruits):
    print str(pr)+' '+f

for price, fruit in zip (prices, fruits):
        print price, fruit 


# In this file we will read te data and plot oxygen vs depth

f_input = open('../swcKiel/Data/met_090_1_001.ctd','r')

for line in f_input:
  if "Profile" in line:
    profile = line.strip().split("=")[1]
    profile = int(profile)
    
print profile
  
f_input.close()

Annette: Can anyone please explain again the difference between using tab and spaces for indenting? I cannot remember anymore...

Rainer: Hi Anette, there is no difference, you just have to make it consistent. But the agreed upon way to do it in python is to use 4 spaces. If you keep to that your scripts will be meaningful also for other python users.


# In this file we will read the data and plot
# oxygen level vs depth

f_input = open('Data/met_090_1_001.ctd',
 'r')

doneWithHeader = False
depthList = []
oxList = []

for line in f_input:
    if doneWithHeader:
        # read and save the data
        dataList = line.split()
        depth = -float(dataList[1])
        ox = float(dataList[5])
        depthList.append(depth)
        oxList.append(ox)

    else:
        if "Profile" in line:
            profile = line.strip().split("=")[1]
            profile = int(profile)
        elif "Latitude" in line: 
            lat = line.strip().split("=")[1]
            lat = float(lat)
        elif "Longitude" in line: 
            lng = line.strip().split("=")[1]
            lng = float(lng)
        elif "Columns" in line:
            # order of columns is consistent
            doneWithHeader = True

f_input.close()    

import matplotlib.pyplot as plt
plt.plot(oxList, depthList)
plt.title('oxygen level at different depths')
plt.show()




# In this file we will read the data and plot
# oxygen level vs depth

import sys

filename = sys.argv[1]

f_input = open(filename, 'r')

doneWithHeader = False
depthList = []
oxList = []

for line in f_input:
    if doneWithHeader:
        # read and save the data
        dataList = line.split()
        depth = -float(dataList[1])
        ox = float(dataList[5])
        depthList.append(depth)
        oxList.append(ox)

    else:
        if "Profile" in line:
            profile = line.strip().split("=")[1]
            profile = int(profile)
        elif "Latitude" in line: 
            lat = line.strip().split("=")[1]
            lat = float(lat)
        elif "Longitude" in line: 
            lng = line.strip().split("=")[1]
            lng = float(lng)
        elif "Columns" in line:
            # order of columns is consistent
            doneWithHeader = True

f_input.close()    

#import matplotlib.pyplot as plt
#plt.plot(oxList, depthList)
#plt.title('oxygen level at different depths')
#plt.show()
print sum(oxList) / len(oxList)



## FROM THE SHELL
for f in Data/*.ctd
do
python readData.py $f
done

(equivalent syntax for one liner)
for f in Data/*.ctd; do python readData.py $f; done


####################


Rainer 140823:
Below is the first version of the developed script.


# In this file we will read the data and load it to a pgsql database.

import sys
import psycopg2 as pgsql



mydb = pgsql.connect(database="survey", user="rkiko", password="rkiko")

cur = mydb.cursor()



cur.execute("""CREATE TABLE IF NOT EXISTS ctd_data
(Profile    text,
Depth FLOAT8,
Oxygen_conc     FLOAT8
)
""", mydb)

mydb.commit()


filename = sys.argv[1]

f_input = open(filename, 'r')

doneWithHeader = False
depthList = []
oxList = []

for line in f_input:
    if doneWithHeader == False:
        if "Profile" in line:
            profile = line.strip().split("=")[1]
            profile = int(profile)
        elif "Latitude" in line: 
            lat = line.strip().split("=")[1]
            lat = float(lat)
        elif "Longitude" in line: 
            lng = line.strip().split("=")[1]
            lng = float(lng)
        elif "Columns" in line:
            # order of columns is consistent
            doneWithHeader = True
            continue
    if doneWithHeader == True:
        # read and save the data
        dataList = line.split()
        depth = -float(dataList[1])
        ox = float(dataList[5])
        depthList.append(depth)
        oxList.append(ox)
        print profile, depth, ox
        cur.execute("""INSERT INTO ctd_data(profile, depth, oxygen_conc) 
                     VALUES (%s, %s, %s)"""
                     %(profile, depth, ox), mydb)


mydb.commit()


f_input.close()    


cur.close()
mydb.close()


#############################

Second version with primary key

# In this file we will read the data and plot
# oxygen level vs depth
# use the script in a for loop to read in all data
# e.g. for meteor ctd_data
#for f in met*ctd; do python readData_to_pgsql_v1.py $f; done
#


import sys
import psycopg2 as pgsql



mydb = pgsql.connect(database="survey", user="rkiko", password="rkiko")

cur = mydb.cursor()



cur.execute("""CREATE TABLE IF NOT EXISTS ctd_data
(Indx TEXT PRIMARY KEY,
Profile text,
Depth FLOAT8,
Oxygen_conc     FLOAT8
)
""", mydb)

mydb.commit()


filename = sys.argv[1]

f_input = open(filename, 'r')

doneWithHeader = False
depthList = []
oxList = []

for line in f_input:
    if doneWithHeader == False:
        if "Profile" in line:
            profile = line.strip().split("=")[1]
            profile = int(profile)
        elif "Latitude" in line: 
            lat = line.strip().split("=")[1]
            lat = float(lat)
        elif "Longitude" in line: 
            lng = line.strip().split("=")[1]
            lng = float(lng)
        elif "Columns" in line:
            # order of columns is consistent
            doneWithHeader = True
            continue
    if doneWithHeader == True:
        # read and save the data
        dataList = line.split()
        depth = -float(dataList[1])
        ox = float(dataList[5])
        depthList.append(depth)
        oxList.append(ox)
        ###index not yet perfect
        indx = "'" + str(profile) + "_" + str(depth) + "'"
        print indx, profile, depth, ox
        cur.execute("""INSERT INTO ctd_data(indx, profile, depth, oxygen_conc) 
                     VALUES (%s, %s, %s, %s)"""
                     %(indx, profile, depth, ox), mydb)


mydb.commit()


f_input.close()    



cur.close()
mydb.close()






####################
#now a script to read out data
# use the script with
# -> python readData_from_pgsql_v1.py
# it will print a dataframe with the average oxygen value for each ctd station in the database
# In this file we will read out data from the pgsql database


import psycopg2 as pgsql
import pandas.io.sql as sql



mydb = pgsql.connect(database="survey", user="rkiko", password="rkiko")

cur = mydb.cursor()

df = sql.read_sql("""select profile, avg(oxygen_conc) as avg_ox 
                       from ctd_data
                       group by profile
                       ORDER BY profile
                        """,  mydb)
print df


cur.close()
mydb.close()






